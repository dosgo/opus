package opus

// OpusTables contains various lookup tables used by the Opus codec
type OpusTables struct{}

var (
	// DCTTable contains DCT coefficients
	DCTTable = [128]float32{
		0.250000, 0.250000, 0.250000, 0.250000, 0.250000, 0.250000, 0.250000, 0.250000,
		0.250000, 0.250000, 0.250000, 0.250000, 0.250000, 0.250000, 0.250000, 0.250000,
		0.351851, 0.338330, 0.311806, 0.273300, 0.224292, 0.166664, 0.102631, 0.034654,
		-0.034654, -0.102631, -0.166664, -0.224292, -0.273300, -0.311806, -0.338330, -0.351851,
		0.346760, 0.293969, 0.196424, 0.068975, -0.068975, -0.196424, -0.293969, -0.346760,
		-0.346760, -0.293969, -0.196424, -0.068975, 0.068975, 0.196424, 0.293969, 0.346760,
		0.338330, 0.224292, 0.034654, -0.166664, -0.311806, -0.351851, -0.273300, -0.102631,
		0.102631, 0.273300, 0.351851, 0.311806, 0.166664, -0.034654, -0.224292, -0.338330,
		0.326641, 0.135299, -0.135299, -0.326641, -0.326641, -0.135299, 0.135299, 0.326641,
		0.326641, 0.135299, -0.135299, -0.326641, -0.326641, -0.135299, 0.135299, 0.326641,
		0.311806, 0.034654, -0.273300, -0.338330, -0.102631, 0.224292, 0.351851, 0.166664,
		-0.166664, -0.351851, -0.224292, 0.102631, 0.338330, 0.273300, -0.034654, -0.311806,
		0.293969, -0.068975, -0.346760, -0.196424, 0.196424, 0.346760, 0.068975, -0.293969,
		-0.293969, 0.068975, 0.346760, 0.196424, -0.196424, -0.346760, -0.068975, 0.293969,
		0.273300, -0.166664, -0.338330, 0.034654, 0.351851, 0.102631, -0.311806, -0.224292,
		0.224292, 0.311806, -0.102631, -0.351851, -0.034654, 0.338330, 0.166664, -0.273300,
	}

	// AnalysisWindow contains analysis window coefficients
	AnalysisWindow = [240]float32{
		0.000043, 0.000171, 0.000385, 0.000685, 0.001071, 0.001541, 0.002098, 0.002739,
		0.003466, 0.004278, 0.005174, 0.006156, 0.007222, 0.008373, 0.009607, 0.010926,
		0.012329, 0.013815, 0.015385, 0.017037, 0.018772, 0.020590, 0.022490, 0.024472,
		0.026535, 0.028679, 0.030904, 0.033210, 0.035595, 0.038060, 0.040604, 0.043227,
		0.045928, 0.048707, 0.051564, 0.054497, 0.057506, 0.060591, 0.063752, 0.066987,
		0.070297, 0.073680, 0.077136, 0.080665, 0.084265, 0.087937, 0.091679, 0.095492,
		0.099373, 0.103323, 0.107342, 0.111427, 0.115579, 0.119797, 0.124080, 0.128428,
		0.132839, 0.137313, 0.141849, 0.146447, 0.151105, 0.155823, 0.160600, 0.165435,
		0.170327, 0.175276, 0.180280, 0.185340, 0.190453, 0.195619, 0.200838, 0.206107,
		0.211427, 0.216797, 0.222215, 0.227680, 0.233193, 0.238751, 0.244353, 0.250000,
		0.255689, 0.261421, 0.267193, 0.273005, 0.278856, 0.284744, 0.290670, 0.296632,
		0.302628, 0.308658, 0.314721, 0.320816, 0.326941, 0.333097, 0.339280, 0.345492,
		0.351729, 0.357992, 0.364280, 0.370590, 0.376923, 0.383277, 0.389651, 0.396044,
		0.402455, 0.408882, 0.415325, 0.421783, 0.428254, 0.434737, 0.441231, 0.447736,
		0.454249, 0.460770, 0.467298, 0.473832, 0.480370, 0.486912, 0.493455, 0.500000,
		0.506545, 0.513088, 0.519630, 0.526168, 0.532702, 0.539230, 0.545751, 0.552264,
		0.558769, 0.565263, 0.571746, 0.578217, 0.584675, 0.591118, 0.597545, 0.603956,
		0.610349, 0.616723, 0.623077, 0.629410, 0.635720, 0.642008, 0.648271, 0.654508,
		0.660720, 0.666903, 0.673059, 0.679184, 0.685279, 0.691342, 0.697372, 0.703368,
		0.709330, 0.715256, 0.721144, 0.726995, 0.732807, 0.738579, 0.744311, 0.750000,
		0.755647, 0.761249, 0.766807, 0.772320, 0.777785, 0.783203, 0.788573, 0.793893,
		0.799162, 0.804381, 0.809547, 0.814660, 0.819720, 0.824724, 0.829673, 0.834565,
		0.839400, 0.844177, 0.848895, 0.853553, 0.858151, 0.862687, 0.867161, 0.871572,
		0.875920, 0.880203, 0.884421, 0.888573, 0.892658, 0.896677, 0.900627, 0.904508,
		0.908321, 0.912063, 0.915735, 0.919335, 0.922864, 0.926320, 0.929703, 0.933013,
		0.936248, 0.939409, 0.942494, 0.945503, 0.948436, 0.951293, 0.954072, 0.956773,
		0.959396, 0.961940, 0.964405, 0.966790, 0.969096, 0.971321, 0.973465, 0.975528,
		0.977510, 0.979410, 0.981228, 0.982963, 0.984615, 0.986185, 0.987671, 0.989074,
		0.990393, 0.991627, 0.992778, 0.993844, 0.994826, 0.995722, 0.996534, 0.997261,
		0.997902, 0.998459, 0.998929, 0.999315, 0.999615, 0.999829, 0.999957, 1.000000,
	}

	// TBands contains frequency band boundaries
	TBands = [19]int{
		2, 4, 6, 8, 10, 12, 14, 16, 20, 24, 28, 32, 40, 48, 56, 68, 80, 96, 120,
	}

	// ExtraBands contains additional frequency band boundaries
	ExtraBands = [22]int{
		1, 2, 4, 6, 8, 10, 12, 14, 16, 20, 24, 28, 32, 40, 48, 56, 68, 80, 96, 120, 160, 200,
	}

	// Weights contains MLP weights
	Weights = [422]float32{
		// Hidden layer weights...
		-0.0941125, -0.302976, -0.603555, -0.19393, -0.185983,
		// ... (rest of the weights array)
		// Output layer weights...
		-0.381439, 0.12115, -0.906927, 2.93878, 1.6388,
		0.882811, 0.874344, 1.21726, -0.874545, 0.321706,
		0.785055, 0.946558, -0.575066, -3.46553, 0.884905,
		0.0924047, -9.90712, 0.391338, 0.160103, -2.04954,
		4.1455, 0.0684029, -0.144761, -0.285282, 0.379244,
		-1.1584, -0.0277241, -9.85, -4.82386, 3.71333,
		3.87308, 3.52558,
	}

	// MLP topology
	MLPTopo = [3]int{25, 15, 2}

	// TansigTable contains tanh-sigmoid approximation values
	TansigTable = [201]float32{
		0.000000, 0.039979, 0.079830, 0.119427, 0.158649,
		0.197375, 0.235496, 0.272905, 0.309507, 0.345214,
		0.379949, 0.413644, 0.446244, 0.477700, 0.507977,
		0.537050, 0.564900, 0.591519, 0.616909, 0.641077,
		0.664037, 0.685809, 0.706419, 0.725897, 0.744277,
		0.761594, 0.777888, 0.793199, 0.807569, 0.821040,
		0.833655, 0.845456, 0.856485, 0.866784, 0.876393,
		0.885352, 0.893698, 0.901468, 0.908698, 0.915420,
		0.921669, 0.927473, 0.932862, 0.937863, 0.942503,
		0.946806, 0.950795, 0.954492, 0.957917, 0.961090,
		0.964028, 0.966747, 0.969265, 0.971594, 0.973749,
		0.975743, 0.977587, 0.979293, 0.980869, 0.982327,
		0.983675, 0.984921, 0.986072, 0.987136, 0.988119,
		0.989027, 0.989867, 0.990642, 0.991359, 0.992020,
		0.992631, 0.993196, 0.993718, 0.994199, 0.994644,
		0.995055, 0.995434, 0.995784, 0.996108, 0.996407,
		0.996682, 0.996937, 0.997172, 0.997389, 0.997590,
		0.997775, 0.997946, 0.998104, 0.998249, 0.998384,
		0.998508, 0.998623, 0.998728, 0.998826, 0.998916,
		0.999000, 0.999076, 0.999147, 0.999213, 0.999273,
		0.999329, 0.999381, 0.999428, 0.999472, 0.999513,
		0.999550, 0.999585, 0.999617, 0.999646, 0.999673,
		0.999699, 0.999722, 0.999743, 0.999763, 0.999781,
		0.999798, 0.999813, 0.999828, 0.999841, 0.999853,
		0.999865, 0.999875, 0.999885, 0.999893, 0.999902,
		0.999909, 0.999916, 0.999923, 0.999929, 0.999934,
		0.999939, 0.999944, 0.999948, 0.999952, 0.999956,
		0.999959, 0.999962, 0.999965, 0.999968, 0.999970,
		0.999973, 0.999975, 0.999977, 0.999978, 0.999980,
		0.999982, 0.999983, 0.999984, 0.999986, 0.999987,
		0.999988, 0.999989, 0.999990, 0.999990, 0.999991,
		0.999992, 0.999992, 0.999993, 0.999994, 0.999994,
		0.999994, 0.999995, 0.999995, 0.999996, 0.999996,
		0.999996, 0.999997, 0.999997, 0.999997, 0.999997,
		0.999997, 0.999998, 0.999998, 0.999998, 0.999998,
		0.999998, 0.999998, 0.999999, 0.999999, 0.999999,
		0.999999, 0.999999, 0.999999, 0.999999, 0.999999,
		0.999999, 0.999999, 0.999999, 0.999999, 0.999999,
		1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
		1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
		1.000000,
	}

	// Bandwidth transition thresholds
	MonoVoiceBandwidthThresholds = [8]int{
		11000, 1000, // NB<->MB
		14000, 1000, // MB<->WB
		17000, 1000, // WB<->SWB
		21000, 2000, // SWB<->FB
	}

	MonoMusicBandwidthThresholds = [8]int{
		12000, 1000, // NB<->MB
		15000, 1000, // MB<->WB
		18000, 2000, // WB<->SWB
		22000, 2000, // SWB<->FB
	}

	StereoVoiceBandwidthThresholds = [8]int{
		11000, 1000, // NB<->MB
		14000, 1000, // MB<->WB
		21000, 2000, // WB<->SWB
		28000, 2000, // SWB<->FB
	}

	StereoMusicBandwidthThresholds = [8]int{
		12000, 1000, // NB<->MB
		18000, 2000, // MB<->WB
		21000, 2000, // WB<->SWB
		30000, 2000, // SWB<->FB
	}

	// Threshold bit-rates for switching between mono and stereo
	StereoVoiceThreshold = 30000
	StereoMusicThreshold = 30000

	// Threshold bit-rate for switching between SILK/hybrid and CELT-only
	ModeThresholds = [2][2]int{
		{64000, 16000}, // voice mono/stereo
		{36000, 16000}, // music mono/stereo
	}
)

// MLPState represents the state of the Multi-Layer Perceptron
type MLPState struct {
	Layers  int
	Topo    [3]int
	Weights [422]float32
}

// Net is the global MLP state instance
var Net = MLPState{
	Layers:  3,
	Topo:    MLPTopo,
	Weights: Weights,
}
